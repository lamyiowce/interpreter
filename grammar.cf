-- Based on: 
-- github.com/BNFC/bnfc/blob/master/examples/haskell-core/Core.cf
-- mimuw.edu.pl/~ben/Zajecia/Mrj2018/Latte/Latte.cf

Program. Prog  ::= [Decl];

-- Literals ----------------------------------------------

LitInt.      Lit ::= Integer ;
LitTrue.     Lit ::= "true" ;
LitFalse.    Lit ::= "false" ;
LitList.     Lit ::= "[" [Expr] "]" ;

-- Expressions ---------------------------------------------

EVar.      Expr8 ::= Ident ;
ELit.      Expr8 ::= Lit ;
EApp.      Expr7 ::= Expr7 Expr8 ;
Neg.       Expr3 ::= "-" Expr4 ;
Not.       Expr6 ::= "!" Expr7 ;
ECons.     Expr5 ::= Expr5 ":" Expr6 ;
EMul.      Expr4 ::= Expr4 MulOp Expr5 ;
EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;
ERel.      Expr2 ::= Expr2 RelOp Expr3 ;
EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;
EOr.       Expr  ::= Expr1 "||" Expr ;
Lambda.    Expr  ::= "\\" Bind "->" Expr;
Let.       Expr  ::= "let" [Decl] "in" Expr ;
Case.      Expr  ::= "case" Expr2 "of" "{" [EAlt] "}"; 
If.        Expr  ::= "if" Expr "then" Expr "else" Expr;

coercions  Expr 8 ;
separator  Expr "," ;

-- Operators -----------------------------------------------

Plus.      AddOp ::= "+" ;
Minus.     AddOp ::= "-" ;
Times.     MulOp ::= "*" ;
Div.       MulOp ::= "/" ;
LTH.       RelOp ::= "<" ;
LE.        RelOp ::= "<=" ;
GTH.       RelOp ::= ">" ;
GE.        RelOp ::= ">=" ;
EQU.       RelOp ::= "==" ;
NE.        RelOp ::= "!=" ;

-- Declarations ------------------------------------------

-- Variable and functions --------------------------------
VDecl.  Decl ::= Ident "::" ETy "=" Expr ;
FDecl.  Decl ::= Ident [Ident] "::" ETy "=" Expr ;
separator nonempty Ident "" ;
-- Algebraic data types ----------------------------------
DDecl.            Decl ::= "data" Ident [ConstrArg] "=" [ConstrDef] ;
Constr.      ConstrDef ::= Ident [ConstrArg] ;
ConstrArgDef.ConstrArg ::= Ident ;

separator ConstrArg "" ;
separator nonempty ConstrDef "|" ;

separator Decl ";" ;

-- Types --------------------------------------------------

ETVar.     ETy2  ::= Ident ;
ETList.    ETy1  ::= "List" ETy1 ;
ETApp.     ETy1  ::= ETy2 ETy1 ;
ETBool.    ETy1  ::= "Bool" ;
ETInt.     ETy1  ::= "Int" ;
ETArrow.   ETy   ::= ETy1 "->" ETy ;

coercions ETy 2 ;

-- Comments -----------------------------------------------

comment "//" ;
comment "/*" "*/" ;

-- Binding ------------------------------------------------

BindMulti.      Bind ::= "(" [BindElem] ")";
BindElemT.  BindElem ::= Ident "::" ETy;

separator nonempty BindElem "," ;

-- alternatives and pattern matching ----------------------

EAltCase.  EAlt ::= ETopPattern "->" Expr; 

ETopPatternAt.   ETopPattern ::= Ident "@" EPattern ;
ETopPatternNo.   ETopPattern ::= EPattern ;
EPatData.           EPattern ::= Ident [EPatConstrArg] ;
-- EPatBind.           EPattern ::= Bind ;
EPatLit.            EPattern ::= Lit ;
EPatIdent.          EPattern ::= Ident ;
EPatDefault.        EPattern ::= "_" ;
EPatHeadIdent.      EPattern ::= Ident ":" EPattern ;
EPatHeadLit.        EPattern ::= Lit ":" EPattern ;

EPatConstrArgDef.EPatConstrArg ::= Ident ;
separator nonempty EPatConstrArg "" ;


separator nonempty EAlt ";" ;
