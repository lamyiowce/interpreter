module SkelGrammar where

-- Haskell module generated by the BNF converter

import AbsGrammar
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transProg :: Prog -> Result
transProg x = case x of
  Program decls -> failure x
transLit :: Lit -> Result
transLit x = case x of
  LitInt integer -> failure x
  LitTrue -> failure x
  LitFalse -> failure x
  LitList exprs -> failure x
transExpr :: Expr -> Result
transExpr x = case x of
  EVar ident -> failure x
  ELit lit -> failure x
  EApp expr1 expr2 -> failure x
  Neg expr -> failure x
  Not expr -> failure x
  ECons expr1 expr2 -> failure x
  EMul expr1 mulop expr2 -> failure x
  EAdd expr1 addop expr2 -> failure x
  ERel expr1 relop expr2 -> failure x
  EAnd expr1 expr2 -> failure x
  EOr expr1 expr2 -> failure x
  Lambda bind expr -> failure x
  Let decls expr -> failure x
  Case expr alts -> failure x
  If expr1 expr2 expr3 -> failure x
transAddOp :: AddOp -> Result
transAddOp x = case x of
  Plus -> failure x
  Minus -> failure x
transMulOp :: MulOp -> Result
transMulOp x = case x of
  Times -> failure x
  Div -> failure x
transRelOp :: RelOp -> Result
transRelOp x = case x of
  LTH -> failure x
  LE -> failure x
  GTH -> failure x
  GE -> failure x
  EQU -> failure x
  NE -> failure x
transDecl :: Decl -> Result
transDecl x = case x of
  VDecl ident ty expr -> failure x
  FDecl ident funargidents ty expr -> failure x
  DDecl ident constrargs constrdefs -> failure x
transFunArgIdent :: FunArgIdent -> Result
transFunArgIdent x = case x of
  FunArgIdentT ident -> failure x
transConstrDef :: ConstrDef -> Result
transConstrDef x = case x of
  Constr ident constrargs -> failure x
transConstrArg :: ConstrArg -> Result
transConstrArg x = case x of
  ConstrArgDef ident -> failure x
transTy :: Ty -> Result
transTy x = case x of
  TBool -> failure x
  TInt -> failure x
  TVar ident -> failure x
  TList ty -> failure x
  TApp ty1 ty2 -> failure x
  TArrow ty1 ty2 -> failure x
transBind :: Bind -> Result
transBind x = case x of
  BindMulti bindelems -> failure x
transBindElem :: BindElem -> Result
transBindElem x = case x of
  BindElemT ident ty -> failure x
transAlt :: Alt -> Result
transAlt x = case x of
  AltCase toppattern expr -> failure x
transTopPattern :: TopPattern -> Result
transTopPattern x = case x of
  TopPatternAt ident pattern -> failure x
  TopPatternNo pattern -> failure x
transPattern :: Pattern -> Result
transPattern x = case x of
  PatData ident patconstrargs -> failure x
  PatBind bind -> failure x
  PatLit lit -> failure x
  PatIdent ident -> failure x
  PatDefault -> failure x
  PatHeadIdent ident pattern -> failure x
  PatHeadLit lit pattern -> failure x
transPatConstrArg :: PatConstrArg -> Result
transPatConstrArg x = case x of
  PatConstrArgDef ident -> failure x

