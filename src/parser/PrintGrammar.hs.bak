{-# LANGUAGE FlexibleInstances, OverlappingInstances #-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for PrintGrammar.
--   Generated by the BNF converter.

module PrintGrammar where

import AbsGrammar
import Data.Char

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print Ident where
  prt _ (Ident i) = doc (showString i)
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print Prog where
  prt i e = case e of
    Program decls -> prPrec i 0 (concatD [prt 0 decls])

instance Print Lit where
  prt i e = case e of
    LitInt n -> prPrec i 0 (concatD [prt 0 n])
    LitTrue -> prPrec i 0 (concatD [doc (showString "true")])
    LitFalse -> prPrec i 0 (concatD [doc (showString "false")])
    LitList exprs -> prPrec i 0 (concatD [doc (showString "["), prt 0 exprs, doc (showString "]")])

instance Print Expr where
  prt i e = case e of
    EVar id -> prPrec i 8 (concatD [prt 0 id])
    ELit lit -> prPrec i 8 (concatD [prt 0 lit])
    EApp expr1 expr2 -> prPrec i 7 (concatD [prt 7 expr1, prt 8 expr2])
    Neg expr -> prPrec i 3 (concatD [doc (showString "-"), prt 4 expr])
    Not expr -> prPrec i 6 (concatD [doc (showString "!"), prt 7 expr])
    ECons expr1 expr2 -> prPrec i 5 (concatD [prt 5 expr1, doc (showString ":"), prt 6 expr2])
    EMul expr1 mulop expr2 -> prPrec i 4 (concatD [prt 4 expr1, prt 0 mulop, prt 5 expr2])
    EAdd expr1 addop expr2 -> prPrec i 3 (concatD [prt 3 expr1, prt 0 addop, prt 4 expr2])
    ERel expr1 relop expr2 -> prPrec i 2 (concatD [prt 2 expr1, prt 0 relop, prt 3 expr2])
    EAnd expr1 expr2 -> prPrec i 1 (concatD [prt 2 expr1, doc (showString "&&"), prt 1 expr2])
    EOr expr1 expr2 -> prPrec i 0 (concatD [prt 1 expr1, doc (showString "||"), prt 0 expr2])
    Lambda bind expr -> prPrec i 0 (concatD [doc (showString "\\"), prt 0 bind, doc (showString "->"), prt 0 expr])
    Let decls expr -> prPrec i 0 (concatD [doc (showString "let"), prt 0 decls, doc (showString "in"), prt 0 expr])
    Case expr ealts -> prPrec i 0 (concatD [doc (showString "case"), prt 2 expr, doc (showString "of"), doc (showString "{"), prt 0 ealts, doc (showString "}")])
    If expr1 expr2 expr3 -> prPrec i 0 (concatD [doc (showString "if"), prt 0 expr1, doc (showString "then"), prt 0 expr2, doc (showString "else"), prt 0 expr3])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [Expr] where
  prt = prtList

instance Print AddOp where
  prt i e = case e of
    Plus -> prPrec i 0 (concatD [doc (showString "+")])
    Minus -> prPrec i 0 (concatD [doc (showString "-")])

instance Print MulOp where
  prt i e = case e of
    Times -> prPrec i 0 (concatD [doc (showString "*")])
    Div -> prPrec i 0 (concatD [doc (showString "/")])

instance Print RelOp where
  prt i e = case e of
    LTH -> prPrec i 0 (concatD [doc (showString "<")])
    LE -> prPrec i 0 (concatD [doc (showString "<=")])
    GTH -> prPrec i 0 (concatD [doc (showString ">")])
    GE -> prPrec i 0 (concatD [doc (showString ">=")])
    EQU -> prPrec i 0 (concatD [doc (showString "==")])
    NE -> prPrec i 0 (concatD [doc (showString "!=")])

instance Print Decl where
  prt i e = case e of
    VDecl id ty expr -> prPrec i 0 (concatD [prt 0 id, doc (showString "::"), prt 0 ty, doc (showString "="), prt 0 expr])
    FDecl id ids ty expr -> prPrec i 0 (concatD [prt 0 id, prt 0 ids, doc (showString "::"), prt 0 ty, doc (showString "="), prt 0 expr])
    DDecl id constrargs constrdefs -> prPrec i 0 (concatD [doc (showString "data"), prt 0 id, prt 0 constrargs, doc (showString "="), prt 0 constrdefs])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print [Ident] where
  prt = prtList

instance Print ConstrDef where
  prt i e = case e of
    Constr id constrargs -> prPrec i 0 (concatD [prt 0 id, prt 0 constrargs])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString "|"), prt 0 xs]

instance Print ConstrArg where
  prt i e = case e of
    ConstrArgDef id -> prPrec i 0 (concatD [prt 0 id])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [ConstrArg] where
  prt = prtList

instance Print [ConstrDef] where
  prt = prtList

instance Print [Decl] where
  prt = prtList

instance Print Ty where
  prt i e = case e of
    TVar id -> prPrec i 2 (concatD [prt 0 id])
    TList ty -> prPrec i 1 (concatD [doc (showString "List"), prt 1 ty])
    TApp ty1 ty2 -> prPrec i 1 (concatD [prt 2 ty1, prt 1 ty2])
    TBool -> prPrec i 1 (concatD [doc (showString "Bool")])
    TInt -> prPrec i 1 (concatD [doc (showString "Int")])
    TNone -> prPrec i 1 (concatD [doc (showString "None")])
    TArrow ty1 ty2 -> prPrec i 0 (concatD [prt 1 ty1, doc (showString "->"), prt 0 ty2])

instance Print Bind where
  prt i e = case e of
    BindMulti bindelems -> prPrec i 0 (concatD [doc (showString "("), prt 0 bindelems, doc (showString ")")])

instance Print BindElem where
  prt i e = case e of
    BindElemT id ty -> prPrec i 0 (concatD [prt 0 id, doc (showString "::"), prt 0 ty])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [BindElem] where
  prt = prtList

instance Print EAlt where
  prt i e = case e of
    EAltCase etoppattern expr -> prPrec i 0 (concatD [prt 0 etoppattern, doc (showString "->"), prt 0 expr])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print ETopPattern where
  prt i e = case e of
    ETopPatternAt id epattern -> prPrec i 0 (concatD [prt 0 id, doc (showString "@"), prt 0 epattern])
    ETopPatternNo epattern -> prPrec i 0 (concatD [prt 0 epattern])

instance Print EPattern where
  prt i e = case e of
    EPatData id epatconstrargs -> prPrec i 0 (concatD [prt 0 id, prt 0 epatconstrargs])
    EPatLit lit -> prPrec i 0 (concatD [prt 0 lit])
    EPatIdent id -> prPrec i 0 (concatD [prt 0 id])
    EPatDefault -> prPrec i 0 (concatD [doc (showString "_")])
    EPatHeadIdent id epattern -> prPrec i 0 (concatD [prt 0 id, doc (showString ":"), prt 0 epattern])
    EPatHeadLit lit epattern -> prPrec i 0 (concatD [prt 0 lit, doc (showString ":"), prt 0 epattern])

instance Print EPatConstrArg where
  prt i e = case e of
    EPatConstrArgDef id -> prPrec i 0 (concatD [prt 0 id])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [EPatConstrArg] where
  prt = prtList

instance Print [EAlt] where
  prt = prtList

